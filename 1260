#define _CRT_SECURE_NO_WARNINGS
#define MAX_SIZE 1001

#include <stdio.h>

//인접 행렬(data가 저장되어 있는 공간)
int data[MAX_SIZE][MAX_SIZE] = { 0, };

//방문 순서 저장할 스택/큐, top/front/rear 변수 선언
 
int stack[MAX_SIZE] = { 0, }; int queue[MAX_SIZE] = { 0, };
int top = 0; int front=0; int rear=0;


void dfs(int start) {

	int visited[MAX_SIZE] = { 0, };

	//시작점 방문했다고 표시하고 스택에 추가
	visited[start] = 1;
	stack[++top] = start;
	printf("%d ", start);

	//스택이 빌 때까지 반복
	while (top>0) {
		//현재 기준점 cur에 저장
		int cur = stack[top--];

		//자식 데이터 없을 때까지 반복
		for (int i = 0; i <MAX_SIZE; i++) {
			//지금 데이터와 연결되어 있는 데이터가 있고, 그 데이터를 방문하지 않았을 때
			if (data[cur][i] == 1 && !visited[i]) {

				//방문했다 표시하고 스택에 추가
				visited[i] = 1;
				stack[++top] = i;
				cur = stack[top];
				printf("%d ", stack[top]);
				i = 0;
				continue;
			}
		}
		//스택이 비면 종료
		if (top == 0) {
			return;
		}

		//더 이상 자식이 없으면 가장 최근에 방문한 노드 출력
		
	}
}


void bfs(int start) {

	int visited[MAX_SIZE] = {0, };

	//시작점 방문했다고 표시하고 큐에 추가
	visited[start] = 1;
	queue[rear++] = start;
	printf("%d ", start);

	//큐가 빌 때까지 반복
	while (front < rear) {
		//현재 기준점 cur에 저장
		int cur = queue[front++];

		//인접한 데이터 찾기 위해 전수조사
		for (int i = 0; i < MAX_SIZE; i++) {
			//지금 데이터와 연결되어 있는 데이터가 있고, 그 데이터를 방문하지 않았을 때
			if (data[cur][i] == 1 && !visited[i]) {

				//방문했다고 표시하고 큐에 추가
				visited[i] = 1;
				queue[rear++] = i;
				printf("%d ", i);
			}
		}
	}
}

void main() {

	int n; int m; int v;
	int data1; int data2;

	//정점 개수, 간선 개수, 시작점 입력
	scanf("%d %d %d", &n, &m, &v);

	for(int i=0;i<m;i++){
		//data 입력
		scanf("%d %d", &data1, &data2);

		//data 배열에 서로 연결되었다는 표시
		data[data1][data2] = data[data2][data1] = 1;

	}

	dfs(v);
	printf("\n");
	bfs(v);
}
