#define _CRT_SECURE_NO_WARNINGS
#define MAX_SIZE 30

#include <stdio.h>


//인접 행렬(data가 저장되어 있는 공간), 데이터의 크기 저장할 변수 선언
int data[MAX_SIZE][MAX_SIZE] = {0,};
int n;

//방문 여부 저장할 배열, 방문 순서 저장할 큐, front, rear 저장할 변수 선언
int visited[MAX_SIZE] = { 0, }; int queue[MAX_SIZE] = {0,};
int front=0; int rear=0;

void bfs(int start) {
	//시작점 방문했다고 표시하고 큐에 추가
	visited[start] = 1;
	queue[rear++] = start;
	printf("시작: %d ", start);

	//큐가 빌 때까지 반복
	while (front < rear) {
		//현재 기준점 cur에 저장
		int cur = queue[front++];

		//데이터의 개수만큼 반복
		for (int i = 1; i <= n; i++) {
			//지금 데이터와 연결되어 있는 데이터가 있고, 그 데이터를 방문하지 않았을 때
			if (data[cur][i] == 1 && !visited[i]) {

				//방문했다고 표시하고 큐에 추가
				visited[i] = 1;
				queue[rear++] = i;
				printf("%d ", i);
			}
		}
	}

}

void main() {

	printf("데이터의 크기를 입력하시오: ");
	scanf("%d", &n);

	printf("그래프에 삽입할 데이터를 '부모 자식' 쌍으로 입력하시오: (*부모와 자식 양 쪽에 -1을 입력할 때까지 반복)\n");
	int data1; int data2;

	while (1) {

		scanf("%d %d", &data1, &data2);

		if (data1 == -1 && data2 == -1)
			break;
		//data배열에다 서로 연결되었다는 표시
		data[data1][data2] = data[data2][data1]= 1;
	}

	int start;
	printf("탐색을 시작할 데이터를 입력하시오: ");
	scanf("%d", &start);

	printf("==========BFS 시작==========\n");
	bfs(start);
}
